# -*- coding: utf-8 -*-
'''

 Problem 12 - Highly divisible triangular number

 The sequence of triangle numbers is generated by adding the natural numbers.
 So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The
 first ten terms would be:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

  Let us list the factors of the first seven triangle numbers:

    1: 1
    3: 1,3
    6: 1,2,3,6
   10: 1,2,5,10
   15: 1,3,5,15
   21: 1,3,7,21
   28: 1,2,4,7,14,28
  We can see that 28 is the first triangle number to have over five divisors.

  What is the value of the first triangle number to have over five hundred
  divisors ?

'''
import unittest

correct_answer = 76576500


def list_factors(number):
    factors = [n for n in range(1, number) if not number % n]
    factors.append(number)
    return factors


def number_of_factors(number):
    num_of_factors = 0
    factor = 1
    while factor <= number:
        if number % factor == 0:
            num_of_factors += 1
        factor += 1
    return num_of_factors


class triangle_number_generator(object):

    def __init__(self):
        self.index = 1
        self.current_number = 0

    def next(self):
        self.current_number += self.index
        self.index += 1
        return self.current_number


class problem12(unittest.TestCase):

    @unittest.skip("This is too slow, think harder !!")
    def test_solution(self):
        candidate = 0
        tn = triangle_number_generator()
        num_of_factors = 0
        while(num_of_factors < 500):
            candidate = tn.next()
            num_of_factors = len(list_factors(candidate))
        self.assertEqual(candidate, correct_answer)

    def test_list_factors(self):
        self.assertEqual(list_factors(21), [1, 3, 7, 21])
        self.assertEqual(list_factors(6), [1, 2, 3, 6])

    def test_number_of_factors(self):
        self.assertEqual(number_of_factors(21), 4)
        self.assertEqual(number_of_factors(28), 6)

    def test_triangle_number_iterator(self):
        tni = triangle_number_generator()
        self.assertEqual(tni.next(), 1)
        self.assertEqual(tni.next(), 3)
        self.assertEqual(tni.next(), 6)
        self.assertEqual(tni.next(), 10)
        self.assertEqual(tni.next(), 15)

if __name__ == '__main__':
    unittest.main()
