# -*- coding: utf-8 -*-
'''

 Problem 2 - Even Fibonacci numbers

 Each new term in the Fibonacci sequence is generated by adding
 the previous two terms. By starting with 1 and 2, the first 10
 terms will be:

     1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

 By considering the terms in the Fibonacci sequence whose values
 do not exceed four million, find the sum of the even-valued terms.

'''
import unittest

correct_answer = 4613732


def fibonacci_till(highest_value):
    serie = [1]
    sum = 1
    previous_sum = 1
    while sum + previous_sum < highest_value:
        new_sum = previous_sum + sum
        previous_sum = sum
        sum = new_sum
        serie.append(sum)
    return serie


def is_odd(value):
    return value % 2 == 0


class problem2(unittest.TestCase):

    def test_solution(self):
        self.assertEqual(
            sum([value for value in fibonacci_till(4000000) if is_odd(value)]),
            correct_answer)

    def test_example(self):
        self.assertEqual(fibonacci_till(100), [1, 2, 3, 5, 8, 13, 21, 34, 55, 89])

if __name__ == '__main__':
    unittest.main()
